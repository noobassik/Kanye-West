# This file is a template, and might need editing before it works on your project.
# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/ruby/tags/
image: "ruby:2.7.5"

# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-a-service
services:
  # - mysql:latest
  - redis:latest
  - postgres:latest

variables:
  POSTGRES_DB: database_name

# Cache gems in between builds
cache:
  paths:
    - vendor/ruby

# This is a basic example for a gem or script which doesn't use
# services such as redis or postgres
before_script:
  - export LC_ALL=C.UTF-8
  - export LANG=en_US.UTF-8
  - export LANGUAGE=en_US.UTF-8
  # Install ssh-agent if not already installed, it is required by Docker.
  # (change apt-get to yum if you use a CentOS-based image)
#  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

  # Run ssh-agent (inside the build environment)
#  - eval $(ssh-agent -s)

  # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
#  - ssh-add <(echo "$SSH_PRIVATE_KEY")

  # For Docker builds disable host key checking. Be aware that by adding that
  # you are suspectible to man-in-the-middle attacks.
  # WARNING: Use this only with the Docker executor, if you use it with shell
  # you will overwrite your user's SSH config.
#  - mkdir -p ~/.ssh
#  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  # In order to properly check the server's host key, assuming you created the
  # SSH_SERVER_HOSTKEYS variable previously, uncomment the following two lines
  # instead.
  # - mkdir -p ~/.ssh
  # - '[[ -f /.dockerenv ]] && echo "$SSH_SERVER_HOSTKEYS" > ~/.ssh/known_hosts'

  - ruby -v                                   # Print out ruby version for debugging
  # Uncomment next line if your rails app needs a JS runtime:
  - apt-get update -q && apt-get install nodejs -yqq
  - gem install bundler:2.3.5                 # Bundler is not installed with the image
  - bundle install -j $(nproc) --path vendor  # Install dependencies into ./vendor/ruby

# Optional - Delete if not using `rubocop`
rubocop:
  script:
  - bundle exec rubocop

# rspec:
#   script:
#   - rspec spec

# rails:
#   variables:
#     DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/$POSTGRES_DB"
#   script:
#   - rails db:migrate
#   - rails db:seed
#   # - rails test

# This deploy job uses a simple deploy flow to Heroku, other providers, e.g. AWS Elastic Beanstalk
# are supported too: https://github.com/travis-ci/dpl
# deploy:
#  type: deploy
#  environment: production
#  script:
#   - gem install dpl
#   - dpl --provider=heroku --app=$HEROKU_APP_NAME --api-key=$HEROKU_PRODUCTION_KEY
